{"ast":null,"code":"import { abi } from \"./abi\";\nimport Web3 from \"web3\";\nvar web3;\nvar contract;\nconst contractAddress = \"0xEBa76c3C54D61cC81a74866E0fF2A1c873b5ce03\";\n\nconst checkCompatible = async () => {\n  // Modern dapp browsers...\n  if (window.ethereum || window.web3) {\n    web3 = new Web3(window.web3.currentProvider);\n    contract = new web3.eth.Contract(abi, contractAddress);\n\n    try {\n      // Request account access if needed\n      await window.ethereum.enable(); // Acccounts now exposed\n    } catch (error) {// User denied account access...\n    }\n  } // Non-dapp browsers...\n  else {\n      console.log(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n      return false;\n    }\n\n  return true;\n};\n\nconst total = async () => {\n  let result = await contract.methods.totalAmount().call((error, result) => result);\n  return web3.utils.fromWei(result, \"ether\");\n};\n\nconst current = async () => {\n  let result = await contract.methods.currentAmount().call((error, result) => result);\n  return web3.utils.fromWei(result, \"ether\");\n};\n\nconst fund = amount => {\n  let amountWei = web3.utils.toWei(amount.toString(), \"ether\");\n  contract.methods.fund().send({\n    from: window.ethereum.selectedAddress,\n    value: amountWei,\n    gas: 3000000\n  }).then(() => console.log(\"Successfully funded!\"));\n};\n\nconst changeTotal = amount => {\n  let amountWei = web3.utils.toWei(amount.toString(), \"ether\");\n  contract.methods.changeTotalAmount(amountWei).send({\n    from: window.ethereum.selectedAddress,\n    gas: 3000000\n  }).then(() => console.log(\"Successfully changed total amount!\"));\n};\n\nconst widthdrawFunds = () => {\n  contract.methods.withdrawFunds().send({\n    from: window.ethereum.selectedAddress,\n    gas: 3000000\n  }).then(() => console.log(\"Successfull widthdrawal!\"));\n};\n\nconst fundContract = {\n  total,\n  fund,\n  current,\n  changeTotal,\n  widthdrawFunds,\n  checkCompatible\n};\nexport default fundContract;","map":{"version":3,"sources":["F:\\Users\\PREM\\Downloads\\donate\\ethereum-funding\\src\\contract\\contract.js"],"names":["abi","Web3","web3","contract","contractAddress","checkCompatible","window","ethereum","currentProvider","eth","Contract","enable","error","console","log","total","result","methods","totalAmount","call","utils","fromWei","current","currentAmount","fund","amount","amountWei","toWei","toString","send","from","selectedAddress","value","gas","then","changeTotal","changeTotalAmount","widthdrawFunds","withdrawFunds","fundContract"],"mappings":"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","sourcesContent":["import { abi } from \"./abi\";\r\nimport Web3 from \"web3\";\r\n\r\nvar web3;\r\nvar contract;\r\nconst contractAddress = \"0xEBa76c3C54D61cC81a74866E0fF2A1c873b5ce03\";\r\n\r\nconst checkCompatible = async () => {\r\n  // Modern dapp browsers...\r\n  if (window.ethereum || window.web3) {\r\n    web3 = new Web3(window.web3.currentProvider);\r\n    contract = new web3.eth.Contract(abi, contractAddress);\r\n    try {\r\n      // Request account access if needed\r\n      await window.ethereum.enable();\r\n      // Acccounts now exposed\r\n    } catch (error) {\r\n      // User denied account access...\r\n    }\r\n  }\r\n  // Non-dapp browsers...\r\n  else {\r\n    console.log(\r\n      \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\r\n    );\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst total = async () => {\r\n  let result = await contract.methods\r\n    .totalAmount()\r\n    .call((error, result) => result);\r\n  return web3.utils.fromWei(result, \"ether\");\r\n};\r\n\r\nconst current = async () => {\r\n  let result = await contract.methods\r\n    .currentAmount()\r\n    .call((error, result) => result);\r\n  return web3.utils.fromWei(result, \"ether\");\r\n};\r\n\r\nconst fund = (amount) => {\r\n  let amountWei = web3.utils.toWei(amount.toString(), \"ether\");\r\n  contract.methods\r\n    .fund()\r\n    .send({\r\n      from: window.ethereum.selectedAddress,\r\n      value: amountWei,\r\n      gas: 3000000,\r\n    })\r\n    .then(() => console.log(\"Successfully funded!\"));\r\n};\r\n\r\nconst changeTotal = (amount) => {\r\n  let amountWei = web3.utils.toWei(amount.toString(), \"ether\");\r\n  contract.methods\r\n    .changeTotalAmount(amountWei)\r\n    .send({\r\n      from: window.ethereum.selectedAddress,\r\n      gas: 3000000,\r\n    })\r\n    .then(() => console.log(\"Successfully changed total amount!\"));\r\n};\r\n\r\nconst widthdrawFunds = () => {\r\n  contract.methods\r\n    .withdrawFunds()\r\n    .send({\r\n      from: window.ethereum.selectedAddress,\r\n      gas: 3000000,\r\n    })\r\n    .then(() => console.log(\"Successfull widthdrawal!\"));\r\n};\r\n\r\nconst fundContract = {\r\n  total,\r\n  fund,\r\n  current,\r\n  changeTotal,\r\n  widthdrawFunds,\r\n  checkCompatible,\r\n};\r\n\r\nexport default fundContract;\r\n"]},"metadata":{},"sourceType":"module"}